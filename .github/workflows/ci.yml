name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      NLU_APIKEY: ${{ secrets.NLU_APIKEY }}
      NLU_URL:    ${{ secrets.NLU_URL }}
      DEV_MODE: ${{ github.ref == 'refs/heads/main' && 'false' || 'true' }}


    steps:
      # 1Ô∏è‚É£  Checkout code
      - uses: actions/checkout@v4

      # 2Ô∏è‚É£  Python toolchain
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3Ô∏è‚É£  Cache pip downloads
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4Ô∏è‚É£  Install deps (core + dev)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools
          pip install -e ".[dev]"

      # 5Ô∏è‚É£  Restore cached pre-commit hook environments
      - name: Restore pre-commit envs
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key:  ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-precommit-

      # 6Ô∏è‚É£  Lint & format checks (driven by .pre-commit-config.yaml)
      - name: Lint and format (pre-commit)
        run: pre-commit run --all-files --hook-stage manual

      # 7Ô∏è‚É£ Cache pytest‚Äôs own cache directory
      - name: Cache pytest cache
        uses: actions/cache@v4
        with:
          path: .pytest_cache
          key: ${{ runner.os }}-pytest-${{ hashFiles('**/pytest.ini') }}

      # 8Ô∏è‚É£  Tests + coverage
      - name: Run tests with coverage
        run: pytest -q

      # 9Ô∏è‚É£  Add coverage to repo
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml            # add `--cov-report=xml` above if you need it
          flags: unittests
          fail_ci_if_error: true

      # üîü  Build Docker image (optional artifact)
      - name: Build Docker image
        run: docker build . --tag notebook-to-prod:ci

      # 11Ô∏è‚É£  Check that secrets are passed (partial echo)
      - name: Check that secrets are passed (partial echo)
        run: |
          echo "NLU_APIKEY starts with: ${NLU_APIKEY:0:6}******"
          echo "NLU_URL base: $(echo $NLU_URL | cut -d/ -f3)"
        env:
          NLU_APIKEY: ${{ secrets.NLU_APIKEY }}
          NLU_URL: ${{ secrets.NLU_URL }}

      # 12Ô∏è‚É£  Run smoke test (mock NLU)
      - name: Run smoke test (mock NLU)
        if: github.ref != 'refs/heads/main'
        run: |
          docker run -d -p 8000:8000 --rm \
            --env DEV_MODE=true \
            --name app notebook-to-prod:ci
          sleep 5
          echo "ü™µ Container logs:"
          docker logs app
          echo "üåê Hitting endpoint:"
          curl -v http://localhost:8000/run/example

      # üåü 13Ô∏è‚É£ Run smoke test (real Watson NLU)
      - name: Run smoke test (real Watson NLU)
        if: github.ref == 'refs/heads/main'
        run: |
          docker run -d -p 8000:8000 --rm \
            --env NLU_APIKEY="${{ secrets.NLU_APIKEY }}" \
            --env NLU_URL="${{ secrets.NLU_URL }}" \
            --env DEV_MODE=false \
            --name app notebook-to-prod:ci
          sleep 5
          echo "ü™µ Container logs:"
          docker logs app
          echo "üåê Hitting endpoint:"
          curl -v http://localhost:8000/run/example
